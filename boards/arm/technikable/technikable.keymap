/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_ORTHO   true

#define COLEMAK  0
#define NAVNUM   1
#define SYMBOL   2
#define FUNC	 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {

 behaviors {
      	ht: hold_tap {
       		compatible = "zmk,behavior-hold-tap";
		label = "hold_tap";
          	#binding-cells = <2>;
            	flavor = "hold-preferred";
            	tapping-term-ms = <200>;
            	quick-tap-ms = <150>;
            	bindings = <&kp>, <&kp>;
	};
	hm: homerow_mods {
            	compatible = "zmk,behavior-hold-tap";
            	label = "HOMEROW_MODS";
           	#binding-cells = <2>;
        	tapping-term-ms = <150>;
       		quick-tap-ms = <150>;
     		flavor = "tap-preferred";
            	bindings = <&kp>, <&kp>;
		retro-tap;
	};
	swap: swapper {
            	compatible = "zmk,behavior-tri-state";
            	label = "SWAPPER";
            	#binding-cells = <0>;
            	bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
            	ignored-key-positions = <1>;
        };
    };

 keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <

&kp Q        &kp W        &kp F        &kp P        &kp B        &none        &none        &kp J        &kp L        &kp U        &kp Y        &kp QUOT
&kp A        &kp R        &kp S        &kp T        &kp G        &none        &none        &kp M        &kp N        &kp E        &kp I        &kp O
&kp Z        &kp X        &kp C        &kp D        &kp V        &none        &none        &kp K        &kp H        &kp COMMA    &kp DOT      &kp FSLH
// thumb row
                &mt LCMD ESC  &mt LSHFT SPACE  &lt NAVNUM TAB    &none        &none    &lt SYMBOL BSPC  &hm RALT SPACE  &hm RGUI ENTER
            >;
        };

        navnum_layer {
            label = "NavNum";
            bindings = <
&swap        &kp HOME     &kp UP       &kp END      &kp PG_UP    &none        &none        &trans       &kp N7       &kp N8       &kp N9       &trans
&sk LALT     &kp LEFT     &kp DOWN     &kp RIGHT    &kp PG_DN    &none        &none        &trans       &kp N4       &kp N5       &kp N6       &trans
&trans       &trans       &trans       &kp BSPC     &kp DEL      &none        &none        &trans       &kp N1       &kp N2       &kp N3       &trans
// thumb row
                          &trans       &trans       &trans       &none        &none        &mo FUNC     &kp N0       &trans
            >;
        };

        symbol_layer {
            label = "Symbol";
            bindings = <
&trans       &trans       &kp LBKT     &kp RBKT     &trans       &none        &none        &kp PIPE     &kp AMPS     &kp ASTRK    &kp RA(N3)   &kp EQUAL
&kp LT       &kp GT       &kp LPAR     &kp RPAR     &trans       &none        &none        &kp UNDER    &kp DLLR     &kp PRCNT    &kp CARET    &kp MINUS
&kp SEMI     &kp COLON    &kp LBRC     &kp RBRC     &trans       &none        &none        &kp LS(NUBS) &kp EXCL     &kp AT       &kp HASH     &kp BSLH
// thumb row
                          &trans       &trans      &mo FUNC      &none        &none        &trans       &caps_word   &trans
            >;
        };

        function_layer {
            label = "Function";
            bindings = <
&kp F1       &kp F2       &kp F3       &kp F4       &sys_reset   &none        &none        &sys_reset   &trans       &trans       &trans       &bt BT_CLR
&kp F5       &kp F6       &kp F7       &kp F8       &none        &none        &none        &trans       &bt BT(3)    &bt BT(4)    &trans       &trans
&kp F9       &kp F10      &kp F11      &kp F12      &none        &none        &none        &trans       &bt BT(0)    &bt BT(1)    &bt BT(2)    &trans
// thumb row
                          &trans   &kp LG(LA(ESC))  &trans       &none        &none        &trans       &trans       &trans
            >;
        };

    };
};

